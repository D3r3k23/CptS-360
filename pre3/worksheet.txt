             LAB3pre Work: Processes in an OS Kernel
                     DUE: 9-23-2021
       Answer questions below. Submit a (text-edit) file to TA
	     
1. READ List: Chapter 3: 3.1-3.5

What's a process? (Page 102) The execution of an image, which is an area of memory with a program's code, data, and stack
	     
Each process is represented by a PROC structure.
Read the PROC structure in 3.4.1 on Page 111 and answer the following questions:

What's the meaning of:
   pid, ppid? Process ID and parent process ID
   status   ? Process status; FREE, READY, RUNNING...
   priority ? Scheduling priority
   event    ? The reason a process went to sleep
   exitCode ? Process exit value

READ 3.5.2 on Process Family Tree. What are the
   PROC pointers child, sibling, parent used for? To implement a general tree as a binary tree. This allow the parent PROC
                                                  to find its children, and for a PROC to wake up its parent when it terminates
	     
2. Download samples/LAB3pre/mtx. Run it under Linux.
   MTX is a multitasking system. It simulates process operations in a
   Unix/Linux kernel, which include
              fork, exit, wait, sleep, wakeup, process switching

	     
/*********** A Multitasking System ************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "type.h"    // PROC struct and system constants
	
// global variables:
PROC proc[NPROC], *running, *freeList, *readyQueue, *sleepList; 

running    = pointer to the current running PROC
freeList   = a list of all FREE PROCs
readyQueue = a priority queue of procs that are READY to run
sleepList  = a list of SLEEP procs, if any.

Run mtx. It first initialize the system, creates an initial process P0.
P0 has the lowest priotiry 0, all other processes have priority 1

Ater initialization,
     P0 forks a child prcoess P1, switch process to run P1.

                The display looks like the following
-----------------------------------------------------------------------------
Welcome to KCW's Multitasking System
1. init system
freeList = [0 0]->[1 0]->[2 0]->[3 0]->[4 0]->[5 0]->[6 0]->[7 0]->[8 0]->NULL

2. create initial process P0
init complete: P0 running

3. P0 fork P1 : enter P1 into readyQueue
	     
4. P0 switch process to run P1
   P0: switch task
   proc 0 in scheduler()
   readyQueue = [1 1]->[0 0]->NULL
   next running = 1
   proc 1 resume to body()

proc 1 running: Parent=0 childList = NULL
freeList  = [2 0]->[3 0]->[4 0]->[5 0]->[6 0]->[7 0]->[8 0]->NULL
readQueue = [0 0]->NULL
sleepList = NULL
input a command: [ps|fork|switch|exit|sleep|wakeup|wait] : 
----------------------------------------------------------------------------
5.                     COMMANDS:
ps     : display procs with pid, ppid, status; same as ps in Unix/Linux
fork   : READ kfork()   on Page 109: What does it do? Creates a child process, adds it the readyQueue, and initializes it
switch : READ tswitch() on Page 108: What does it do? Saves the processes state, places the process in the readyQueue, finds
                                                      finds the process in the readyQueue, and resumes it
exit   : READ kexit()   on Page 112: What does it do? Cleans up the process state, cleans up child processes, stores exit code,
                                                      changes state to ZOMBIE, and wakes up its parent process
         
sleep  : READ ksleep()  on Page 111: What does it do? Stores the reason for the sleep in event, enters the process in the sleepList,
                                                      and switches processes
wakeup : READ kwakeup() on Page 112: What does it do? Wakes up all processes in the sleepList with the matching event code
	     
wait   : READ kwait()   on Page 114: What does it do? Waits for a child process that is a ZOMBIE, and returns it to the freeList
---------------------------------------------------------------------------

------------------------ TEST REQUIREMENTS ---------------------------------
6. Step 1: test fork
While P1 running, enter fork: What happens? proc 1 moved to readyQueue

Enter fork many times; 
      How many times can P1 fork? 7 WHY? There are 7 processes in readyQueue at program start

Enter Control-c to end the program run.


7. Step 2: Test sleep/wakeup
Run mtx again.
While P1 running, fork a child P2;
Switch to run P2. Where did P1 go? readyQueue WHY? Because it's not finished running

P2 running : Enter sleep, with a value, e.g.123 to let P2 SLEEP.
What happens? Switch to P1 and P2 added to sleepList WHY? P1 was the first proc in readyQueue and P2 is waiting for an event to wake up

Now, P1 should be running. Enter wakeup with a value, e.g. 234
Did any proc wake up? No WHY? There were no procs with the same event code in the sleepList

P1: Enter wakeup with 123
What happens? P2 moved to readyQueue WHY? P2's event code was 123


8. Step 3: test child exit/parent wait
	     
When a proc dies (exit) with a value, it becomes a ZOMBIE, wakeup its parent.
Parent may issue wait to wait for a ZOMBIE child, and frees the ZOMBIE

Run mtx;
P1: enter wait; What happens? wait error WHY? The process has no children

CASE 1: child exit first, parent wait later

P1: fork a child P2, switch to P2.
P2: enter exit, with a value, e.g. 123 ==> P2 will die with exitCode=123.
Which process runs now? P1 WHY? It was the first process in readyQueue
enter ps to see the proc status: P2 status = ? ZOMBIE

(P1 still running) enter wait; What happens? P2 was returned to the freeList
                   enter ps;   What happened to P2? Its status is now FREE

CASE 2: parent wait first, child exit later

P1: enter fork to fork a child P3
P1: enter wait;  What happens to P1? It goes to sleep WHY? It is waiting for P3 to exit
P3: Enter exit with a value; What happens? P1 wakes up, P3 was moved to the freeList, and P1 resumed
P1: enter ps;  What's the status of P3? FREE WHY? It exited while its parent was waiting
	     
9. Step 4: test Orphans
	     
When a process with children dies first, all its children become orphans.
In Unix/Linux, every process (except P0) MUST have a unique parent.
So, all orphans become P1's children. Hence P1 never dies.

Run mtx again.
P1: fork child P2, Switch to P2.
P2: fork several children of its own, e.g. P3, P4, P5 (all in its childList).
P2: exit with a value. 
P1 should be running WHY? Because it was the next process in readyQueue
P1: enter ps to see proc status: which proc is ZOMBIE? P2
What happened to P2's children? They became P1's children
P1: enter wait; What happens? P2 is moved to the freeList
P1: enter wait again; What happens? Switched to P3 WHY? P1 is waiting for a child process, so it switched to
                                                        the next process in readyQueue

How to let P1 READY to run again? Terminate one of its child processes
